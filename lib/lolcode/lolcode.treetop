# TODO: LINE tests (incl. LONGNESS)

module Lolcode
module Compiler
grammar Lolcode
	rule program
		hai
		program_body
	end

	rule program_body
		kthxbye
	/
		(w? (stmt / btw / "\n") program_body)
	end

	rule program_fragment
		ignored_line*
		w?
		content:(
			kthxbye {
				def compile
					nil
				end
			}
		/
			stmt
		)
		{
			def compile
				content.compile
			end
		}
	end

	rule blank_line
		w? "\n"
	end

	rule ignored_line
		w? (btw / "\n" / obtw eos)
	end

	rule hai
		"HAI" w (ident / "1.3") blank_line
	end

	rule kthxbye
		'KTHX' ('BYE'/'BAI') [ \t\n]*
	end

	rule stmt
		action:(
			has_a
		/
			o_hai_im
		/
			how_iz
		/
			visible
		/
			gimmeh
		/
			assign
		/
			cast_stmt
		/
			o_rly
		/
			wtf
		/
			plz
		/
			found_yr
		/
			im_in_yr
		/
			im_in_yr_bukkit
		/
			gtfo
		/
			stmt_expr
		)
		eos
		{
			def compile
				action.compile
			end
		}
	end

	rule btw
		"BTW" [^\n]* "\n"
	end

	rule eos
		(w? [,\n])
	/
		(w btw)
	end

	rule obtw
		"OBTW" [ \t\n]+ (!("TLDR" eos) [^ \t\n]+ [ \t\n]+)* "TLDR"
	end

	rule can_has
		"CAN" w "HAS" w yarn_literal
		{
			def compile
				Compile::can_has(yarn_literal.compile)
			end
		}
	end

	rule has_a
		var w "HAS" w "A" w ident
		initializer:(w "ITZ" w expr)?
		{
			def compile
				bukkit = var.compile
				slot = ident.text_value
				initial = initializer.expr.compile unless initializer.empty?
				Compile::has_a(bukkit, slot, initial)
			end
		}
	end

	rule o_hai_im
		'O' w 'HAI'
		name_part:(w 'IM' w !liek var)?
		liek_part:(w 'IM' w liek)?
		eos
		o_hai_im_body
		{
			def compile
				name = name_part.var.compile unless name_part.empty?
				parent = liek_part.liek.compile unless liek_part.empty?
				body = o_hai_im_body.compile
				Compile::o_hai_im(name, parent, body)
			end
		}
	end

	rule o_hai_im_body
		ignored_line*
		w? 'KTHX'
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:o_hai_im_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule how_iz
		'HOW' w 'IZ' w var w ident
		args:(
			w 'ALL' w ('YR' w)? all:ident
			{
				def fully_variadic?
					true
				end
			}
		/
			w ('YR' w)? ident
			named:(w 'AN' w ('YR' w)? (!'ALL') ident)*
			rest:(w 'AN' w 'ALL' w ('YR' w)? ident)?
			{
				def fully_variadic?
					false
				end
			}
		)?
		eos
		function_body
		{
			def compile
				bukkit = var.compile
				slot = ident.text_value
				arg_names = []
				unless args.empty?
					if args.fully_variadic?
						rest_name = args.all.text_value
					else
						arg_names.push args.ident.text_value
						args.named.elements.each do |arg|
							arg_names.push arg.ident.text_value
						end
						rest_name = args.rest.ident.text_value unless args.rest.empty?
					end
				end
				body = function_body.compile
				Compile::how_iz(bukkit, slot, arg_names, rest_name, body)
			end
		}
	end

	rule function_body
		ignored_line*
		w? 'IF' w 'U' w 'SAY' w 'SO'
		{
			def compile
				Compile::if_u_say_so
			end
		}
	/
		ignored_line*
		w? stmt
		body:function_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule visible
		"VISIBLE" w expr
		rest:(w ('AN' w)? expr)*
		omit_newline:(w? '!')?
		{
			def compile
				args = [expr.compile]
				rest.elements.map do |arg|
					args.push arg.expr.compile
				end
				Compile::visible(args, omit_newline.empty?)
			end
		}
	end

	rule gimmeh
		"GIMMEH" w var
		{
			def compile
				Compile::gimmeh(var.compile)
			end
		}
	end

	rule assign
		var w 'R' w expr
		{
			def compile
				Compile::assign(var.compile, expr.compile)
			end
		}
	end

	rule cast_stmt
		var:var w 'IS' w 'NOW' w 'A' w typename:var
		{
			def compile
				Compile::is_now_a(var.compile, typename.compile)
			end
		}
	end

	rule stmt_expr
		expr
		{
			def compile
				Compile::set_it(super)
			end
		}
	end

	rule o_rly
		"O" w "RLY?" eos
		blank_line*
		w? "YA" w "RLY" eos
		body:o_rly_body
		mebbes:(
			w? "MEBBE" w expr eos
			body:o_rly_body
		)*
		no_wai:(
			w? "NO" w "WAI" eos
			body:no_wai_body
		)?
		w? "OIC"
		{
			def compile
				consequent = body.compile
				alternatives = mebbes.elements.map do |mebbe|
					[mebbe.expr.compile, mebbe.body.compile]
				end
				last_alternative = no_wai.body.compile unless no_wai.empty?
				Compile::o_rly(consequent, alternatives, last_alternative)
			end
		}
	end

	rule o_rly_body
		ignored_line*
		&(w? (("MEBBE" w) / ("NO" w "WAI") / "OIC"))
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:o_rly_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule no_wai_body
		ignored_line*
		&(w? "OIC") ''
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:no_wai_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule wtf
		"WTF?" eos
		blank_line*
		omgs:(
			w? "OMG" w literal eos
			body:omg_body
		)+
		omgwtf:(
			w? "OMGWTF" eos
			body:omgwtf_body
		)?
		w? "OIC"
		{
			def compile
				choices = omgs.elements.map do |omg|
					[omg.literal.value, omg.body.compile]
				end
				choices.push [nil, omgwtf.body.compile] unless omgwtf.empty?
				Compile::wtf(choices)
			end
		}
	end

	rule omg_body
		ignored_line*
		&(w? (("OMG" w) / ("OMGWTF") / "OIC")) ''
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:omg_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule omgwtf_body
		ignored_line*
		&(w? "OIC") ''
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:omgwtf_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule plz
		"PLZ" eos
		body:plz_body
		o_noeses:(
			w? "O" w "NOES" w 
			condition:(
				"ITZ" w "A" w kind:expr {
					def is_liek?
						true
					end
				}
			/
				expr {
					def is_liek?
						false
					end
				}
			)
			eos
			body:plz_body
		)*
		o_wel:(
			w? "O" w "WEL" eos
			body:o_wel_body
		)?
		w? "KTHX"
		{
			def compile
				action = body.compile
				handlers = o_noeses.elements.map do |o_noes|
					if o_noes.condition.is_liek?
						parent = o_noes.condition.kind.compile
						cond = Compile::itz_a(parent)
					else
						cond = o_noes.condition.compile
					end
					[cond, o_noes.body.compile]
				end
				cleanup = o_wel.body.compile unless o_wel.empty?
				Compile::plz(action, handlers, cleanup)
			end
		}
	end

	rule plz_body
		ignored_line*
		&(w? (("O" w "NOES") / ("O" w "WEL") / "KTHX"))
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:plz_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule o_wel_body
		ignored_line*
		&(w? "KTHX")
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:o_wel_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule found_yr
		op:(
			'FOUND' w ('YR' w)? {
				def to_sym
					:FoundYr
				end
			}
		/
			'DO' w 'NOT' w 'WANT' w {
				def to_sym
					:DoNotWant
				end
			}
		)
		expr
		{
			def compile
				Compile::found_yr(op.to_sym, expr.compile)
			end
		}
	end

	rule gtfo
		op:('GTFO' / 'WHATEVER')
		arg:(w ident)?
		{
			def compile
				label = arg.ident.text_value unless arg.empty?
				kind = op.text_value.to_sym
				Compile::gtfo(kind, label)
			end
		}
	end

	rule im_in_yr_bukkit
		'IM' w 'IN' w ('YR' w)? expr w ident w 'YR' w label:ident
		eos
		loop_body
		{
			def compile
				body = loop_body.compile
				obj = expr.compile
				slot = ident.text_value
				name = label.text_value
				Compile::im_in_yr_bukkit(obj, slot, name, body)
			end
		}
	end

	rule im_in_yr
		'IM' w 'IN' w 'YR' w ident
		increment:(
			w
			dir:(
				'UPPIN' {
					def op
						:next
					end
				}
			/
				'NERFIN' {
					def op
						:pred
					end
				}
			)
			w ('YR' w)? var {
				def compile
					loop_var = var.compile
					incr = dir.op
					Compile::uppin(loop_var, incr)
				end
			}
		)?
		condition:(
			w
			waiting_for:(
				'TIL' {
					def value
						false
					end
				}
			/
				'WILE' {
					def value
						true
					end
				}
			)
			w expr {
				def compile
					cond = expr.compile
					final = waiting_for.value
					Compile::wile(cond, final)
				end
			}
		)?
		eos
		loop_body {
			def compile
				body = loop_body.compile
				test = condition.compile unless condition.empty?
				incr = increment.compile unless increment.empty?
				name = ident.text_value
				Compile::im_in_yr(name, incr, test, body)
			end
		}
	end

	rule loop_body
		ignored_line*
		w? 'KTHX'
		{
			def compile
				nil
			end
		}
	/
		ignored_line*
		w? stmt
		body:loop_body
		{
			def compile
				Compile::sequence(stmt.compile, body.compile)
			end
		}
	end

	rule expr
		function_call
	/
		# Why? Because otherwise function_calls are left-recursive...
		simple_expr
	end

	rule simple_expr
		builtin_op
	/
		var {
			def compile
				Compile::get(super)
			end
		}
	/
		literal
	end

	rule builtin_op
		monadic_op
	/
		dyadic_op
	/
		variadic_op
	/
		cast
	/
		can_has
	/
		liek
	end
	
	# This is not part of monadic_op because it is used by o_hai_im.
	# This form is an extension to Lolcode 1.3.
	rule liek
		(
			'LIEK' (w 'A')?
		/
			'A'
		)
		w expr
		{
			def compile
				op = Compile::monadic_op(:LIEK)
				Compile::apply_monadic(op, expr.compile)
			end
		}
	end

	rule monadic_op
		op_name:(
			'NOT' {
				def to_sym
					:NOT
				end
			}
		)
		w expr
		{
			def compile
				op = Compile::monadic_op(op_name.to_sym)
				Compile::apply_monadic(op, expr.compile)
			end
		}
	end

	rule dyadic_op
		op_name:(
			name_part:('SUM' / 'DIFF' / 'PRODUKT' / 'QUOSHUNT' / 'MOD' / 'BIGGR' / 'SMALLR')
			w 'OF' {
				def op
					Compile::numeric_dyadic_op(name_part.text_value.to_sym)
				end
			}
		/
			name_part:('BOTH' / 'EITHER' / 'WON')
			w 'OF' {
				def op
					Compile::boolean_dyadic_op(name_part.text_value.to_sym)
				end
			}
		/
			'BOTH' w 'SAEM' {
				def op
					Compile::both_saem_op
				end
			}
		/
			'DIFFRINT' {
				def op
					Compile::diffrint_op
				end
			}
		)
		w left:expr w ('AN' w)? right:expr
		{
			def compile
				op = op_name.op
				Compile::apply_dyadic(op, left.compile, right.compile)
			end
		}
	end

	rule variadic_op
		op_name:(
			name_part:('ALL' / 'ANY')
			w 'OF'
			{
				def op
					Compile::boolean_variadic_op(name_part.text_value.to_sym)
				end
			}
		/
			'SMOOSH'
			{
				def op
					Compile::smoosh_op
				end
			}
		)
		w first:expr
		rest:(w !'MKAY' ('AN' w)? expr)*
		mkay
		{
			def compile
				op = op_name.op
				args = [first.compile]
				rest.elements.each do |arg|
					args.push arg.expr.compile
				end
				Compile::apply_variadic(op, args)
			end
		}
	end

	rule mkay
		w "MKAY"
	/
		&eos
	end

	rule cast
		'MAEK' w expr w ('A' w)? var
		{
			def compile
				Compile::maek(expr.compile, var.compile)
			end
		}
	end

	rule function_call
		simple_expr w 'IZ' w ident
		args:(w !'MKAY' ('YR' w)? expr
			rest:(w 'AN' w ('YR' w)? expr)*
		)?
		mkay
		{
			def compile
				me = simple_expr.compile
				name = ident.text_value
				arg_exprs = []
				unless args.empty?
					arg_exprs.push args.expr.compile
					args.rest.elements.each do |arg|
						arg_exprs.push arg.expr.compile
					end
				end
				Compile::function_call(me, name, arg_exprs)
			end
		}
	end

	rule var
		'MAH' w var {
			def compile
				rest = var.compile
				lambda {|env|
					pieces = rest.call(env)
					return pieces if pieces.is_a?(Runtime::DoNotWant)
					pieces.unshift(Runtime::Environment::Me)
				}
			end
		}
	/
		'SRS' w expr {
			def compile
				# FIXME "SRS" with "'Z"? Or just say no?
				val = expr.compile
				lambda {|env|
					actual = val.call(env)
					return actual if actual.is_a?(Runtime::DoNotWant)
					[actual.to_str]
				}
			end
		}
	/
		# FIXME allow <expr>'Z <slot>?
		ident w? "'Z" w var {
			def compile
				base = ident.text_value
				rest = var.compile
				lambda {|env|
					pieces = rest.call(env)
					return pieces if pieces.is_a?(Runtime::DoNotWant)
					pieces.unshift(base)
				}
			end
		}
	/
		ident {
			def compile
				name = text_value
				lambda {|env| [name] }
			end
		}
	end

	rule literal
		numbar_literal
	/
		numbr_literal
	/
		yarn_literal
	end

	rule numbar_literal
		'-'?
		(
			'.' [0-9]+
		/
			[0-9]+ '.' [0-9]*
		)
		{
			def value
				text_value.to_f
			end

			def compile
				Compile::numbar(self.value)
			end
		}
	end

	rule numbr_literal
		'-'? [0-9]+ {
			def value
				text_value.to_i
			end

			def compile
				Compile.numbr(self.value)
			end
		}
	end

	rule yarn_literal
		'"'
		contents:(
			':"' {
				def char_value
					'"'
				end
			}
		/
			':)' {
				def char_value
					"\n"
				end
			}
		/
			':>' {
				def char_value
					"\t"
				end
			}
		/
			':o' {
				def char_value
					"\g"
				end
			}
		/
			'::' {
				def char_value
					':'
				end
			}
		/
			':(' digits:[0-9a-fA-F]+ ')' {
				def char_value
					digits.text_value.hex.chr
				end
			}
		/
			':{' var '}' {
				def char_value
					text_value
				end
				def compile
					var_ref = var.compile
					lambda {|env|
						actual_var = var_ref.call(env)
						return actual_var if actual_var.is_a?(Runtime::DoNotWant)
						val = env.get(actual_var)
						return val if val.is_a?(Runtime::DoNotWant)
						Runtime::Yarn.cast(env.world, val)
					}
				end
			}
		/
			':[' [A-Z ]+ ']' {
				def char_value
					raise "Named characters are not supported in this implementation of Lolcode :-("
					# FIXME NAMED CHARS HOW THE HECK
					text_value
				end
			}
		/
			[^"] {
				def char_value
					text_value
				end
			}
		)*
		'"'
		{
			def value
				contents.elements.map(&:char_value).join
			end

			def compile
				chars = contents.elements
				pieces = []
				until chars.empty?
					fixed = chars.take_while {|c| !c.respond_to? :compile }
					pieces << fixed.map(&:char_value).join
					chars.shift(fixed.count)
					mutable = chars.take_while {|c| c.respond_to? :compile }
					pieces += mutable.map(&:compile)
					chars.shift(mutable.count)
				end
				lambda {|env|
					chars = pieces.map do |char|
						if char.respond_to?(:call)
							char = char.call(env)
							break char if char.is_a?(Runtime::DoNotWant)
						end
						char
					end
					return chars if chars.is_a?(Runtime::DoNotWant)
					Runtime::Yarn.new(env.world, chars.join)
				}
			end
		}
	end

	rule ident
		([a-zA-Z] [a-zA-Z0-9_]*)
	end

	rule w
		(
			[ \t]
		/
			("..." / "…") "\n"
		)+
	end
end
end
end